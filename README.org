#+TITLE: fxp_videoclipper README
#+AUTHOR: emporas
#+DATE: 2025-03-24

* Overview
fxp_videoclipper is an open source tool for easy videoclip creation with optional GMIC mode. It supports several subcommands including exporter, sampler, merger, gmicer, clutter, and clipper. This tool allows you to extract frames from a video, sample frames evenly, merge images, apply GMIC commands, transfer colors via CLUT, and create complete video clips.

* Installation
To install the tool, clone the repository and compile the project:

  #+BEGIN_SRC bash
  git clone https://github.com/yourusername/fxp_videoclipper.git
  cd fxp_videoclipper
  cargo build --release
  #+END_SRC

Make sure you have Rust and Cargo installed.

* Usage
The main command is `fxp_videoclipper`, which accepts global options and subcommands. To view the general help message:

  #+BEGIN_SRC bash
  fxp_videoclipper -h
  #+END_SRC

For detailed help on each subcommand, append `-h` to the command name. For example, for the exporter:

  #+BEGIN_SRC bash
  fxp_videoclipper exporter -h
  #+END_SRC

* Exporter Command
The exporter mode extracts frames from a video based on duration and resolution. It supports the following options:

-  *-i, --input* : Input video file.
-  *-o, --output* : Output directory to save frames.
-  *-p, --pixel-limit* : Maximum upper limit for pixel resolution.
-  *-a, --audio* : Optional MP3 file path.
-  *-d, --duration* : Duration in milliseconds to cut the video.
-  *-f, --fps* : Frames per second to extract.

Below are several examples demonstrating how to use the exporter command.

** Example 1: Basic Extraction

Extract frames from a video with a specified duration and FPS, saving them to an output directory.

#+BEGIN_SRC bash
fxp_videoclipper exporter \
  --input path/to/sample_video.mp4 \
  --output path/to/output_frames \
  --duration 30000 \
  --fps 25
#+END_SRC

*Explanation:*
- Extract frames from *sample_video.mp4*.
- Output frames are stored in *output_frames*.
- The video is cut to 30,000 milliseconds (30 seconds).
- 25 frames are extracted per second.

** Example 2: Extraction with Pixel Limit and Audio Overlay

Extract frames using a pixel resolution upper limit and include an MP3 file for synchronization.

#+BEGIN_SRC bash
fxp_videoclipper exporter \
  --input path/to/sample_video.mp4 \
  --output path/to/output_frames \
  --pixel-limit 1920 \
  --audio path/to/sample_audio.mp3 \
  --duration 45000 \
  --fps 30
#+END_SRC

*Explanation:*
- Uses a pixel limit of 1920 to ensure frames do not exceed this resolution.
- An optional audio file (*sample_audio.mp3*) is provided.
- The video clip is cut to 45 seconds with 30 frames per second.

** Example 3: Minimal Command Usage

For a simple extraction without audio or pixel limitations, just provide the essential parameters.

#+BEGIN_SRC bash
fxp_videoclipper exporter -i sample_video.mp4 -o frames_output -d 20000 -f 15
#+END_SRC

*Explanation:*
- Uses shorthand flags for input (-i) and output (-o).
- Extracts frames from the first 20 seconds at 15 FPS.
* Sampler Command
The sampler mode extracts frames evenly across a video. It supports several options for flexible sampling:

- *-i, --input*: Input video file.
- *-o, --output*: Output directory where the sampled frames will be saved.
- *-u, --multiple*: Flag to enable extraction of multiple frames.
- *-n, --number*: Specifies the number of frames to extract when using multiple sampling.
- *-a, --audio*: Optional path to an MP3 file to accompany the sampling.
- *-d, --duration*: Duration in milliseconds to cut the video for sampling.

Below are some usage examples:

** Example 1: Basic Single Frame Sampling

This command samples frames evenly across the video using default settings.

#+BEGIN_SRC bash
fxp_videoclipper sampler -i path/to/video.mp4
#+END_SRC

*Explanation:*
- Samples frames from *video.mp4*.
- No output directory is specified, so the default location is used.

** Example 2: Multiple Frame Sampling with Specified Number

Extract a fixed number of frames from the video and specify an output directory.

#+BEGIN_SRC bash
fxp_videoclipper sampler -i path/to/video.mp4 -o path/to/sampled_frames -u -n 10
#+END_SRC

*Explanation:*
- Uses the `--multiple` flag to extract multiple frames.
- Extracts 10 frames and saves them to the *sampled_frames* directory.

** Example 3: Sampling with Audio Overlay and Custom Duration

Sample frames from a portion of the video and synchronize with an audio track.

#+BEGIN_SRC bash
fxp_videoclipper sampler -i path/to/video.mp4 -o path/to/sampled_frames -a path/to/audio.mp3 -d 30000
#+END_SRC

*Explanation:*
- Cuts the video to a 30,000 millisecond (30 seconds) clip.
- Uses an MP3 file for audio synchronization.
- Saves the sampled frames to the specified output directory.
* Merger Command Guide
This section explains how to use the merger command to blend two directories of images.

** Overview
The merger command allows you to merge images from two different directories. The primary input directory is provided using the `--input` option, while the second directory is specified with `--second-directory`. You can also set an opacity level to control the blending effect.

** Command Usage
#+BEGIN_SRC bash
fxp_videoclipper merger [OPTIONS] --input <INPUT> --second-directory <DIRECTORY2>
#+END_SRC

** Options
- *-i, --input <INPUT>*
  Input directory for the first set of images.
- *-r, --second-directory <DIRECTORY2>*
  Path to the second image directory.
- *-o, --output <OUTPUT>*
  (Optional) Output directory where merged images will be saved.
- *-t, --opacity <OPACITY>*
  Opacity level for merging images.
  *Default value:* 0.5

** Example Usage
Here is an example of how to merge two directories with a custom opacity level:

#+BEGIN_SRC bash
fxp_videoclipper merger \
  --input path/to/first_directory \
  --second-directory path/to/second_directory \
  --output path/to/output_directory \
  --opacity 0.7
#+END_SRC

*Explanation:*
- Input Directory (`--input`) : The first directory containing images to merge.
- Second Directory (`--second-directory`): The second set of images to be merged.
- Output Directory (`--output`): The location where the merged images will be saved.
- Opacity (`--opacity`): Adjusts the blending; in this example, the opacity is set to 0.7.

With these instructions, users should be able to effectively utilize the merger functionality in fxp_videoclipper.
* Gmicer Command Guide
This section explains how to use the GMIC command to apply a GMIC operation to all images within an input directory.

** Overview
The `gmicer` command processes each image in the input directory by applying a GMIC command with specified arguments. Additional GMIC arguments can be provided to customize the image processing, and an output directory may be specified to store the processed images.

** Command Usage
#+BEGIN_SRC bash
fxp_videoclipper gmicer [OPTIONS] --input <INPUT> [GMIC_ARGS]...
#+END_SRC

** Options and Arguments
- *-i, --input <INPUT>*
  Input directory containing the images to process.
- *-o, --output <OUTPUT>*
  (Optional) Output directory where the processed images will be saved.
- *[GMIC_ARGS]...*
  Arguments that are directly passed to the GMIC command.

** Example Usage
Below is an example that applies a GMIC command to all images in the input directory:

#+BEGIN_SRC bash
fxp_videoclipper gmicer \
  --input path/to/input_directory \
  --output path/to/output_directory \
  -fx_dreamsmooth 10,0.5,0.8,1
#+END_SRC

*Explanation*
- *Input Directory (`--input`)*: Specifies the folder containing the images you want to process.
- *Output Directory (`--output`)*: Defines where the processed images will be saved; if omitted, the program may use default handling.
- *GMIC Arguments (`[GMIC_ARGS]...`)*: Additional arguments passed to GMIC, allowing for customizable image processing. In the example, the GMIC command `-fx_dreamsmooth 10,0.5,0.8,1` is applied to each image.

This guide helps users understand how to leverage the GMIC functionality within `fxp_videoclipper` for batch image processing.

* Contributing
Contributions are welcome! Please see CONTRIBUTING.org for guidelines on how to help improve fxp_videoclipper.

* License
fxp_videoclipper is released under the MIT License. See LICENSE for details.
